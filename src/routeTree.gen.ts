/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as AppSitemapRouteImport } from './routes/_app/sitemap'
import { Route as AppSampleSearchParamsRouteImport } from './routes/_app/_sample/search-params'
import { Route as AppSampleQueryRouteImport } from './routes/_app/_sample/query'

const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppSitemapRoute = AppSitemapRouteImport.update({
  id: '/sitemap',
  path: '/sitemap',
  getParentRoute: () => AppRoute,
} as any)
const AppSampleSearchParamsRoute = AppSampleSearchParamsRouteImport.update({
  id: '/_sample/search-params',
  path: '/search-params',
  getParentRoute: () => AppRoute,
} as any)
const AppSampleQueryRoute = AppSampleQueryRouteImport.update({
  id: '/_sample/query',
  path: '/query',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/sitemap': typeof AppSitemapRoute
  '/': typeof AppIndexRoute
  '/query': typeof AppSampleQueryRoute
  '/search-params': typeof AppSampleSearchParamsRoute
}
export interface FileRoutesByTo {
  '/sitemap': typeof AppSitemapRoute
  '/': typeof AppIndexRoute
  '/query': typeof AppSampleQueryRoute
  '/search-params': typeof AppSampleSearchParamsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/_app/sitemap': typeof AppSitemapRoute
  '/_app/': typeof AppIndexRoute
  '/_app/_sample/query': typeof AppSampleQueryRoute
  '/_app/_sample/search-params': typeof AppSampleSearchParamsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/sitemap' | '/' | '/query' | '/search-params'
  fileRoutesByTo: FileRoutesByTo
  to: '/sitemap' | '/' | '/query' | '/search-params'
  id:
    | '__root__'
    | '/_app'
    | '/_app/sitemap'
    | '/_app/'
    | '/_app/_sample/query'
    | '/_app/_sample/search-params'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/sitemap': {
      id: '/_app/sitemap'
      path: '/sitemap'
      fullPath: '/sitemap'
      preLoaderRoute: typeof AppSitemapRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/_sample/search-params': {
      id: '/_app/_sample/search-params'
      path: '/search-params'
      fullPath: '/search-params'
      preLoaderRoute: typeof AppSampleSearchParamsRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/_sample/query': {
      id: '/_app/_sample/query'
      path: '/query'
      fullPath: '/query'
      preLoaderRoute: typeof AppSampleQueryRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppSitemapRoute: typeof AppSitemapRoute
  AppIndexRoute: typeof AppIndexRoute
  AppSampleQueryRoute: typeof AppSampleQueryRoute
  AppSampleSearchParamsRoute: typeof AppSampleSearchParamsRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppSitemapRoute: AppSitemapRoute,
  AppIndexRoute: AppIndexRoute,
  AppSampleQueryRoute: AppSampleQueryRoute,
  AppSampleSearchParamsRoute: AppSampleSearchParamsRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
